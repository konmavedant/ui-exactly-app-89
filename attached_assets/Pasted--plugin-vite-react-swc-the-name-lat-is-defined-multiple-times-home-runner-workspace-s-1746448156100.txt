[plugin:vite:react-swc] × the name `lat` is defined multiple times
     ╭─[/home/runner/workspace/src/lib/runeCalculations.ts:83:1]
  80 │   dateObj?: Date | null
  81 │ ): Promise<RuneTimeInfluence> {
  82 │   const now = new Date('2025-05-05T15:32:00');
  83 │   const [lat, lng] = locationCoordinates[location] || locationCoordinates['Mumbai'];
     ·          ─┬─
     ·           ╰── previous definition of `lat` here
  84 │   
  85 │   // Get actual sunrise and sunset times using sunrise-sunset-js
  86 │   const sunrise = getSunrise(lat, lng, now);
  87 │   const sunset = getSunset(lat, lng, now);
  88 │ 
  89 │   // Convert all times to minutes since midnight
  90 │   const currentMinutes = hours * 60 + minutes;
  91 │   const sunriseMinutes = sunrise.getHours() * 60 + sunrise.getMinutes();
  92 │   const sunsetMinutes = sunset.getHours() * 60 + sunset.getMinutes();
  93 │ 
  94 │   // Calculate day and night periods
  95 │   const dayLengthMinutes = sunsetMinutes - sunriseMinutes;
  96 │   const nightLengthMinutes = (1440 - sunsetMinutes) + sunriseMinutes;
  97 │ 
  98 │   // Calculate Rune durations
  99 │   const dayRuneDuration = dayLengthMinutes / 12;
 100 │   const nightRuneDuration = nightLengthMinutes / 12;
 101 │ 
 102 │   // Calculate Big Arm rotation
 103 │   let hourRotation;
 104 │   if (currentMinutes >= sunriseMinutes && currentMinutes <= sunsetMinutes) {
 105 │     // Day period (90° to 270°)
 106 │     const minutesSinceSunrise = currentMinutes - sunriseMinutes;
 107 │     const dayProgress = minutesSinceSunrise / dayLengthMinutes;
 108 │     hourRotation = 90 + (dayProgress * 180); // Map progress to 90°-270° range
 109 │   } else {
 110 │     // Night period (270° to 90°)
 111 │     let minutesSinceSunset;
 112 │     if (currentMinutes < sunriseMinutes) {
 113 │       minutesSinceSunset = currentMinutes + (1440 - sunsetMinutes);
 114 │     } else {
 115 │       minutesSinceSunset = currentMinutes - sunsetMinutes;
 116 │     }
 117 │     const nightProgress = minutesSinceSunset / nightLengthMinutes;
 118 │     hourRotation = 270 + (nightProgress * 180); // Map progress to 270°-90° range
 119 │   }
 120 │   hourRotation = hourRotation % 360;
 121 │ 
 122 │   // Calculate Small Arm rotation
 123 │   // For May 5, we're 21 days into Aries (which started April 14)
 124 │   // Total days in Aries period is 31 days
 125 │   const daysInSign = 31;
 126 │   const daysPassed = 21;
 127 │   const progressInSign = daysPassed / daysInSign;
 128 │   const baseRotation = 0; // Aries starts at 0°
 129 │   const [lat, lng] = locationCoordinates[location] || locationCoordinates['Mumbai'];
     ·          ─┬─
     ·           ╰── `lat` redefined here
 130 │   const astrologyData = await getAstrologyData(now, lat, lng);
 131 │   
 132 │   let minuteRotation = baseRotation + (progressInSign * 30);
     ╰────
  × the name `lng` is defined multiple times
     ╭─[/home/runner/workspace/src/lib/runeCalculations.ts:83:1]
  80 │   dateObj?: Date | null
  81 │ ): Promise<RuneTimeInfluence> {
  82 │   const now = new Date('2025-05-05T15:32:00');
  83 │   const [lat, lng] = locationCoordinates[location] || locationCoordinates['Mumbai'];
     ·               ─┬─
     ·                ╰── previous definition of `lng` here
  84 │   
  85 │   // Get actual sunrise and sunset times using sunrise-sunset-js
  86 │   const sunrise = getSunrise(lat, lng, now);
  87 │   const sunset = getSunset(lat, lng, now);
  88 │ 
  89 │   // Convert all times to minutes since midnight
  90 │   const currentMinutes = hours * 60 + minutes;
  91 │   const sunriseMinutes = sunrise.getHours() * 60 + sunrise.getMinutes();
  92 │   const sunsetMinutes = sunset.getHours() * 60 + sunset.getMinutes();
  93 │ 
  94 │   // Calculate day and night periods
  95 │   const dayLengthMinutes = sunsetMinutes - sunriseMinutes;
  96 │   const nightLengthMinutes = (1440 - sunsetMinutes) + sunriseMinutes;
  97 │ 
  98 │   // Calculate Rune durations
  99 │   const dayRuneDuration = dayLengthMinutes / 12;
 100 │   const nightRuneDuration = nightLengthMinutes / 12;
 101 │ 
 102 │   // Calculate Big Arm rotation
 103 │   let hourRotation;
 104 │   if (currentMinutes >= sunriseMinutes && currentMinutes <= sunsetMinutes) {
 105 │     // Day period (90° to 270°)
 106 │     const minutesSinceSunrise = currentMinutes - sunriseMinutes;
 107 │     const dayProgress = minutesSinceSunrise / dayLengthMinutes;
 108 │     hourRotation = 90 + (dayProgress * 180); // Map progress to 90°-270° range
 109 │   } else {
 110 │     // Night period (270° to 90°)
 111 │     let minutesSinceSunset;
 112 │     if (currentMinutes < sunriseMinutes) {
 113 │       minutesSinceSunset = currentMinutes + (1440 - sunsetMinutes);
 114 │     } else {
 115 │       minutesSinceSunset = currentMinutes - sunsetMinutes;
 116 │     }
 117 │     const nightProgress = minutesSinceSunset / nightLengthMinutes;
 118 │     hourRotation = 270 + (nightProgress * 180); // Map progress to 270°-90° range
 119 │   }
 120 │   hourRotation = hourRotation % 360;
 121 │ 
 122 │   // Calculate Small Arm rotation
 123 │   // For May 5, we're 21 days into Aries (which started April 14)
 124 │   // Total days in Aries period is 31 days
 125 │   const daysInSign = 31;
 126 │   const daysPassed = 21;
 127 │   const progressInSign = daysPassed / daysInSign;
 128 │   const baseRotation = 0; // Aries starts at 0°
 129 │   const [lat, lng] = locationCoordinates[location] || locationCoordinates['Mumbai'];
     ·               ─┬─
     ·                ╰── `lng` redefined here
 130 │   const astrologyData = await getAstrologyData(now, lat, lng);
 131 │   
 132 │   let minuteRotation = baseRotation + (progressInSign * 30);
     ╰────
/home/runner/workspace/src/lib/runeCalculations.ts:83:1